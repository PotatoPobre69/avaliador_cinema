# -*- coding: utf-8 -*-
"""avaliador_cinema.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-jFR_U1ngH_x0dBzBll3s8uhPa4m7JJ
"""

"""Idéia: Sistema de Cadastro para acessar um site de notas de filme, onde você pode registrar o nome, o diretor, a nota e um comentário sobre o filme"""

import getpass
import os
import random
import re
import string

if not os.path.exists("users"):
    os.makedirs("users")
if not os.path.exists("movies"):
    os.makedirs("movies")

# CLASSE USUÁRIO:
class User:
    def __init__ (self, user_name, user_login, user_email, user_password):
        self.user_name = user_name
        self.user_login = user_login
        self.user_email = user_email
        self.user_password = user_password

    def __str__(self) -> str:
        return (
            f"Nome:     {self.user_name}\n"
            f"Login:    {self.user_login}\n"
            f"Email:    {self.user_email}\n"
            f"Senha:    {self.user_password}\n"
        )

    @classmethod
    def get_user(cls) -> "User":
        while True:
            user_name = input("Digite seu nome completo (todos os nomes precisam começar com letra maiúscula): ")
            if cls(user_name, "", "", "").validate_user_name():
                print("Nome Válido!")
                break
            else:
                print("Nome Inválido! Certifique-se que todos os nomes começam com letras maiúsculas.")

        while True:
            user_login = input("Digite seu login (deve ter entre 3 e 16 caracteres, sem espaços e sem letras maiúsculas): @")
            if cls("", user_login, "", "").validate_user_login():
                print("Login Válido")
                break
            else:
                print("Login Inválido! Deve ter entre 3 e 16 caracteres, sem espaços e sem letras maiúsculas.")

        while True:
            user_email = input("Digite seu endereço de email: ")
            if cls("", "", user_email, "").validate_user_email():
                print("Email Válido")
                break
            else:
                print("Email Inválido! Verifique o formato.")

        while True:
            user_password = getpass.getpass("Digite sua senha (deve ter pelo menos 8 caracteres, com letras maiúsculas, minúsculas, números e caracteres especiais): ")
            if cls("", "", "", user_password).validate_user_password():
                print("Senha Válida")
                break
            else:
                print("Senha Inválida. Deve ter pelo menos 8 caracteres, com letras maiúsculas, minúsculas, números e caracteres especiais.")

        return cls(user_name, user_login, user_email, user_password)

    def validate_user_name(self) -> bool:
        return self.user_name.istitle()

    def validate_user_login(self) -> bool:
        upper = any(i in string.ascii_uppercase for i in self.user_login)
        space = any(i in string.whitespace for i in self.user_login)

        if 3 <= len(self.user_login) <= 16:
            return not (upper or space)
        return False

    def validate_user_email(self) -> bool:
        validacao = r"[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,7}"

        if len(self.user_email) <= 255:
            local_part = self.user_email.split('@')[0]
            if 0 < len(local_part) < 64:
                return bool(re.fullmatch(validacao, self.user_email))
        return False

    def validate_user_password(self) -> bool:
        lower = any(i in string.ascii_lowercase for i in self.user_password)
        upper = any(i in string.ascii_uppercase for i in self.user_password)
        number = any(i in string.digits for i in self.user_password)
        spchar = any(i in string.punctuation for i in self.user_password)
        space = any(i in string.whitespace for i in self.user_password)

        if len(self.user_password) >= 8:
            return lower and upper and number and spchar and not space
        return False

# CLASSE FILME
class Movie:
    def __init__ (self, movie_id, movie_name, movie_director, movie_tags, movie_rating, movie_comments):
        self.movie_id = movie_id
        self.movie_name = movie_name
        self.movie_director = movie_director
        self.movie_tags = movie_tags
        self.movie_rating = movie_rating
        self.movie_comments = movie_comments

    def __str__(self) -> str:
        return (
            f"Nome do Filme:        {self.movie_name} ({self.movie_rating:.2f}) - #{self.movie_id}\n"
            f"Diretor do FIlme:     {self.movie_director}\n"
            f"Categorias:           {self.movie_tags}\n"
            f"Comentários:          {self.movie_movie_comments}\n"
        )

    @classmethod
    def get_movie(cls) -> "Movie":
        while True:
            movie_name = input("Digite o nome do Filme (todos os nomes precisam começar com letra maiúscula): ")
            if cls("", movie_name, "", "", "", "").validate_movie_name():
                print("Filme Válido")
                break
            else:
                print("Filme Inválido! Certifique-se que todas as palavras começam com letras maiúsculas.")

        while True:
            movie_director = input("Digite o nome do Diretor do Filme (todos os nomes precisam começar com letra maiúscula): ")
            if cls("", "", movie_director, "", "", "").validate_movie_director():
                print("Diretor Válido")
                break
            else:
                print("Diretor Inválido! Certifique-se que todas as palavras começam com letras maiúsculas.")

        while True:
            movie_rating = float(input("Digite a nota do Filme (nota de 0.1 à 10): "))
            if cls("", "", "", "", movie_rating, "").validate_movie_rating():
                print("Nota Adicionada")
                break
            else:
                print("Nota Inválida! Utilize apenas números de 0.1 à 10.")

        return cls(movie_name, movie_director, movie_rating)

    def generate_movie_id(self, LENGHT = 10) -> str:
        characters = string.ascii_letters + string.digits + string.punctuation
        self.movie_id = "".join(random.choices(characters, k=LENGHT))
        return self.movie_id

    def validate_movie_name(self):
        return self.movie_name.istitle()

    def validate_movie_director(self):
        return self.movie_director.istitle()

    def validate_movie_rating(self):
        return self.movie_rating > 0 and self.movie_rating <= 0

    def validate_movie_comments(self):
        return len(self.movie_comments) <= 500

# CONSOLE PARA AVALIAR O FILME:
def rating_console():
    while True:
        print("Bem-vindo ao Algoritmo avaliador_cinema.py")
        print("Escolha:\n1 - Catálogo de Filmes\n2 - Adicionar Filme ao Catálogo\n3 - Avaliar Filme\n 4 - Meu Perfil\n5 - Sair")
        option = input("Digite o número da opção deejada: ")

        if option == "1":
            print("Esse é nosso catálogo")
        elif option == "2":
            print("Adicione o filme: ")
            new_movie = Movie.get_movie()
        elif option == "5":
            print("Saindo...")
            break

def main():
    while True:
        print("Bem-vindo ao Algoritmo avaliador_cinema.py, caso não tenha uma conta ainda, registre-se e se torne um Avaliador\nEscolha:\n1 - Registrar-se\n2 - Ja tenho uma conta\n3 - Sair")
        option = input("Digite o número da opção desejada: ")

        if option == "1":
            new_user = User.get_user()
            print("\nCadastro concluído com sucesso.")

            while True:
                rating_console()

        elif option == "2":
            login = input("Digite seu login: @")
            password = getpass.getpass("Digite sua senha: ")

            user = User.load_from_file(login)
            if user and user.password == password:
                print("\nLogin bem-sucedido!")
                print(user)
            else:
                print("Login ou senha inválidos.")

        elif option == "3":
            print("Saindo...")
            break

        else:
            print("Opção inválida. Por favor, escolha 1, 2 ou 3.")

if __name__ == "__main__":
    main()